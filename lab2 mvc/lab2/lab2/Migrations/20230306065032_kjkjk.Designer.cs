// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab2.model;

#nullable disable

namespace lab2.Migrations
{
    [DbContext(typeof(Context_DB))]
    [Migration("20230306065032_kjkjk")]
    partial class kjkjk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lab2.model.city.city", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("country_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("country_ID");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("lab2.model.continent.continent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("continent", (string)null);
                });

            modelBuilder.Entity("lab2.model.country.country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("continant_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("continant_ID");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("lab2.model.city.city", b =>
                {
                    b.HasOne("lab2.model.country.country", "country")
                        .WithMany("city")
                        .HasForeignKey("country_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("lab2.model.country.country", b =>
                {
                    b.HasOne("lab2.model.continent.continent", "continent")
                        .WithMany("country")
                        .HasForeignKey("continant_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("continent");
                });

            modelBuilder.Entity("lab2.model.continent.continent", b =>
                {
                    b.Navigation("country");
                });

            modelBuilder.Entity("lab2.model.country.country", b =>
                {
                    b.Navigation("city");
                });
#pragma warning restore 612, 618
        }
    }
}
